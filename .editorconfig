################################################################################################
## CORE EDITORCONFIG PROPERTIES
##
## https://editorconfig.org/#supported-properties
################################################################################################

## Note: This file is managed in the ITP-Conventions package. Do not change this file.

# No inheritance: this is the top-level .editorconfig.
root = true

[*]
end_of_line = crlf
charset = utf-8
insert_final_newline = true

[*.{cs,csx,vb,vbx,sql}]
indent_style = tab
indent_size = 4
tab_width = 4
trim_trailing_whitespace = true

[*.csproj]
indent_style = space
indent_size = 2
tab_width = 2
trim_trailing_whitespace = true

[*.{html,xhtml,master,xml,xsd,config,aspx,ascx,asax}]
indent_style = space
indent_size = 2
tab_width = 2
trim_trailing_whitespace = false

[*.json]
indent_style = space
indent_size = 2
tab_width = 2
trim_trailing_whitespace = true

[*.md]
indent_style = space
indent_size = 2
tab_width = 2
trim_trailing_whitespace = false

[*.vue]
indent_style = space
indent_size = 2
tab_width = 2
trim_trailing_whitespace = true

################################################################################################
## CODE STYLE
##
## These .NET style rules focus on consistent code style.
##
## https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
################################################################################################

[*.{cs,vb,vbx}]

################################################################################################
# FORMATTING RULES
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules
################################################################################################

# Organize using directives
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = true

# New line options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#new-line-options
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = false
csharp_new_line_before_members_in_object_initializers = false
csharp_new_line_before_open_brace = false
csharp_new_line_between_query_expression_clauses = true

# Indentation options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#indentation-options
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Spacing options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#spacing-options
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrap options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#wrap-options
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

################################################################################################
## LANGUAGE AND UNNECESSARY CODE RULES
##
## https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules
################################################################################################

# IDE0001 – Simplify name
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0001
dotnet_diagnostic.IDE0001.severity = suggestion

# IDE0002 – Simplify member access
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0002
dotnet_diagnostic.IDE0002.severity = suggestion

# IDE0003 – Remove this or Me qualification
# IDE0009 – Add this or Me qualification
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# IDE0004 – Remove unnecessary cast
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0004
dotnet_diagnostic.IDE0004.severity = suggestion

# IDE0005 – Remove unnecessary import
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0005
dotnet_diagnostic.IDE0005.severity = suggestion

# IDE0007 – Use var instead of explicit type
# IDE0008 – Use explicit type instead of var
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# IDE0010 – Add missing cases to switch statement
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0010
dotnet_diagnostic.IDE0010.severity = suggestion

# IDE0011 – Add braces
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0011
csharp_prefer_braces = true:suggestion

# IDE0016 – Use throw expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0016
csharp_style_throw_expression = true:suggestion

# IDE0017 – Use object initializers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0017
dotnet_style_object_initializer = true:suggestion

# IDE0018 – Inline variable declaration
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0018
csharp_style_inlined_variable_declaration = true:suggestion

# IDE0019 – Use pattern matching to avoid as followed by a null check
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0019
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# IDE0020 – Use pattern matching to avoid is check followed by a cast (with variable)
# IDE0038 – Use pattern matching to avoid is check followed by a cast (without variable)
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0020
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion

# IDE0021 – Use expression body for constructors
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0021
csharp_style_expression_bodied_constructors = true:suggestion

# IDE0022 – Use expression body for methods
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0022
csharp_style_expression_bodied_methods = true:suggestion

# IDE0023 – Use expression body for conversion operators
# IDE0024 – Use expression body for operators
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0023
csharp_style_expression_bodied_operators = true:suggestion

# IDE0025 – Use expression body for properties
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0025
csharp_style_expression_bodied_properties = true:suggestion

# IDE0026 – Use expression body for indexers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0026
csharp_style_expression_bodied_indexers = true:suggestion

# IDE0027 – Use expression body for accessors
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0027
csharp_style_expression_bodied_accessors = true:suggestion

# IDE0028 – Use collection initializers
# IDE0300 – Use collection expression for array
# IDE0301 – Use collection expression for empty
# IDE0302 – Use collection expression for stackalloc
# IDE0302 – Use collection expression for stackalloc
# IDE0304 – Use collection expression for builder
# IDE0305 – Use collection expression for fluent
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0028
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_collection_expression = true:suggestion

# IDE0029 – Null check can be simplified
# IDE0030 – Null check can be simplified
# IDE0270 – Null check can be simplified
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0029
dotnet_style_coalesce_expression = true:suggestion

# IDE0031 – Use null propagation
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0031
dotnet_style_null_propagation = true:suggestion

# IDE0032 – Use auto property
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0032
dotnet_style_prefer_auto_properties = true:suggestion

# IDE0033 – Use explicitly provided tuple name
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0033
dotnet_style_explicit_tuple_names = true:suggestion

# IDE0034 – Simplify default expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0034
csharp_prefer_simple_default_expression = true:suggestion

# IDE0035 – Remove unreachable code
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0035
dotnet_diagnostic.IDE0035.severity = warning

# IDE0036 – Order modifiers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0036
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# IDE0037 – Use inferred member name
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0037
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion

# IDE0039 – Use local function instead of lambda
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0039
csharp_style_prefer_local_over_anonymous_function = true:suggestion

# IDE0040 – Add accessibility modifiers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0040
dotnet_style_require_accessibility_modifiers = always:suggestion

# IDE0041 – Use is null check
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0041
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# IDE0042 – Deconstruct variable declaration
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0042
csharp_style_deconstructed_variable_declaration = true:suggestion

# IDE0044 – Add readonly modifier
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0044
dotnet_style_readonly_field = true:suggestion

# IDE0045 – Use conditional expression for assignment
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0045
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion

# IDE0046 – Use conditional expression for return
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0046
dotnet_style_prefer_conditional_expression_over_return = true:suggestion

# IDE0047 – Remove unnecessary parentheses
# IDE0048 – Add parentheses for clarity
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# IDE0049 – Use language keywords instead of framework type names for type references
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# IDE0050 – Convert anonymous type to tuple
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0050
dotnet_diagnostic.IDE0050.severity = suggestion

# IDE0051 – Remove unused private member
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0051
dotnet_diagnostic.IDE0051.severity = suggestion

# IDE0052 – Remove unread private member
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0052
dotnet_diagnostic.IDE0052.severity = suggestion

# IDE0053 – Use expression body for lambdas
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0053
csharp_style_expression_bodied_lambdas = true:suggestion

# IDE0054 – Use compound assignment
# IDE0074 – Use coalesce compound assignment
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0054
dotnet_style_prefer_compound_assignment = true:suggestion

# IDE0055 – Fix formatting
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0055
dotnet_diagnostic.IDE0055.severity = suggestion

# IDE0056 – Use index operator
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0056
csharp_style_prefer_index_operator = true:suggestion

# IDE0057 – Use range operator
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0057
csharp_style_prefer_range_operator = true:suggestion

# IDE0058 – Remove unused expression value
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0058
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion

# IDE0059 – Remove unnecessary value assignment
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0059
csharp_style_unused_value_assignment_preference = discard_variable:suggestion

# IDE0060 – Remove unused parameter
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0060
dotnet_code_quality_unused_parameters = all:suggestion

# IDE0061 – Use expression body for local functions
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0061
csharp_style_expression_bodied_local_functions = true:suggestion

# IDE0062 – Make local function static
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0062
csharp_prefer_static_local_function = true:suggestion

# IDE0063 – Use simple using statement
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0063
csharp_prefer_simple_using_statement = true:suggestion

# IDE0064 – Make struct fields writable
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0064
dotnet_diagnostic.IDE0064.severity = warning

# IDE0065 – using directive placement
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0065
csharp_using_directive_placement = outside_namespace:warning

# IDE0066 – Use switch expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0066
csharp_style_prefer_switch_expression = true:suggestion

# IDE0070 – Use System.HashCode.Combine
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0070
dotnet_diagnostic.IDE0070.severity = warning

# IDE0071 – Simplify interpolation
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0071
dotnet_style_prefer_simplified_interpolation = true:suggestion

# IDE0072 – Add missing cases to switch expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0072
dotnet_diagnostic.IDE0072.severity = suggestion

# IDE0073 – Use file header
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0073
# file_header_template = <none>

# IDE0075 – Simplify conditional expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0075
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion

# IDE0076 – Remove invalid global SuppressMessageAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0076
dotnet_diagnostic.IDE0076.severity = warning

# IDE0077 – Avoid legacy format target in global SuppressMessageAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0077
dotnet_diagnostic.IDE0077.severity = warning

# IDE0078 – Use pattern matching
# IDE0260 – Use pattern matching
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0078
csharp_style_prefer_pattern_matching = true:suggestion

# IDE0079 – Remove unnecessary suppression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0079
dotnet_remove_unnecessary_suppression_exclusions = all:suggestion

# IDE0080 – Remove unnecessary suppression operator
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0080
dotnet_diagnostic.IDE0080.severity = warning

# IDE0082 – Convert typeof to nameof
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0082
dotnet_diagnostic.IDE0082.severity = suggestion

# IDE0083 – Use pattern matching (not operator)
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0083
csharp_style_prefer_not_pattern = true:suggestion

# IDE0090 – Simplify new expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0090
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# IDE0100 – Remove unnecessary equality operator
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0100
dotnet_diagnostic.IDE0100.severity = suggestion

# IDE0110 – Remove unnecessary discard
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0110
dotnet_diagnostic.IDE0110.severity = warning

# IDE0120 – Simplify LINQ expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0120
dotnet_diagnostic.IDE0120.severity = suggestion

# IDE0130 – Namespace does not match folder structure
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0130
dotnet_style_namespace_match_folder = true:suggestion

# IDE0150 – Prefer null check over type check
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0150
csharp_style_prefer_null_check_over_type_check = true:suggestion

# IDE0160 – Use block-scoped namespace
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0160
csharp_style_namespace_declarations = file_scoped:hidden

# IDE0170 – Simplify property pattern
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0170
csharp_style_prefer_extended_property_pattern = true:suggestion

# IDE0180 – Use tuple to swap values
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0180
csharp_style_prefer_tuple_swap = true:suggestion

# IDE0200 – Remove unnecessary lambda expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0200
csharp_style_prefer_method_group_conversion = true:suggestion

# IDE0210 – Convert to top-level statements
# IDE0211 – Convert to 'Program.Main' style program
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0210
csharp_style_prefer_top_level_statements = false:warning

# IDE0220 – Add explicit cast in foreach loop
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0220
dotnet_style_prefer_foreach_explicit_cast_in_source = true:suggestion

# IDE0230 – Use UTF-8 string literal
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0230
csharp_style_prefer_utf8_string_literals = true:suggestion

# IDE0240 – Nullable directive is redundant
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0240
dotnet_diagnostic.IDE0240.severity = suggestion

# IDE0241 – Nullable directive is unnecessary
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0241
dotnet_diagnostic.IDE0241.severity = suggestion

# IDE0250 – Struct can be made 'readonly'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0250
csharp_style_prefer_readonly_struct = true:suggestion

# IDE0251 – Member can be made 'readonly'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0251
csharp_style_prefer_readonly_struct_member = true:suggestion

# IDE0280 – Use nameof
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0280
dotnet_diagnostic.IDE0280.severity = suggestion

# IDE0290 – Use primary constructor
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0290
csharp_style_prefer_primary_constructors = true:suggestion

# IDE1005 – Use conditional delegate call
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide1005
csharp_style_conditional_delegate_call = true:suggestion

# IDE1006 – Naming styles
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide1006
dotnet_diagnostic.IDE1006.severity = suggestion

################################################################################################
## NAMING CONVENTIONS
##
## https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules
## https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines
################################################################################################

dotnet_style_namespace_match_folder = true

# Naming styles

# PascalCase: The style for most symbols
dotnet_naming_style.PascalCase.required_prefix =
dotnet_naming_style.PascalCase.required_suffix =
dotnet_naming_style.PascalCase.word_separator =
dotnet_naming_style.PascalCase.capitalization = pascal_case

# IPascalCase: Interface symbols
dotnet_naming_style.IPascalCase.required_prefix = I
dotnet_naming_style.IPascalCase.required_suffix =
dotnet_naming_style.IPascalCase.word_separator =
dotnet_naming_style.IPascalCase.capitalization = pascal_case

# camelCase: local symbols
dotnet_naming_style.camelCase.required_prefix =
dotnet_naming_style.camelCase.required_suffix =
dotnet_naming_style.camelCase.word_separator =
dotnet_naming_style.camelCase.capitalization = camel_case

# TPascalCase: Type parameter symbols
dotnet_naming_style.TPascalCase.required_prefix = T
dotnet_naming_style.TPascalCase.required_suffix =
dotnet_naming_style.TPascalCase.word_separator =
dotnet_naming_style.TPascalCase.capitalization = pascal_case

# _leadingUnderscore: Private fields
dotnet_naming_style.ALL_UPPER.required_prefix =
dotnet_naming_style.ALL_UPPER.required_suffix = _
dotnet_naming_style.ALL_UPPER.word_separator =
dotnet_naming_style.ALL_UPPER.capitalization = camel_case

# ALL_UPPER: Constant symbols (currently not used)
dotnet_naming_style.ALL_UPPER.required_prefix =
dotnet_naming_style.ALL_UPPER.required_suffix =
dotnet_naming_style.ALL_UPPER.word_separator = _
dotnet_naming_style.ALL_UPPER.capitalization = all_upper

# Symbol specifications (groups)

# kinds: namespace class struct enum interface
#        property method field event delegate
#        parameter type_parameter local local_function

dotnet_naming_symbols.default.applicable_kinds = *
dotnet_naming_symbols.default.applicable_accessibilities = *
dotnet_naming_symbols.default.required_modifiers =

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = *
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.local.applicable_kinds = parameter, local, local_function
dotnet_naming_symbols.local.applicable_accessibilities = *
dotnet_naming_symbols.local.required_modifiers =

dotnet_naming_symbols.private_field.applicable_kinds = field
dotnet_naming_symbols.private_field.applicable_accessibilities = private
dotnet_naming_symbols.private_field.required_modifiers =

dotnet_naming_symbols.type_parameter.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameter.applicable_accessibilities = *
dotnet_naming_symbols.type_parameter.required_modifiers =

# Naming rules

dotnet_naming_rule.default_is_pascal_case.severity = suggestion
dotnet_naming_rule.default_is_pascal_case.symbols = default
dotnet_naming_rule.default_is_pascal_case.style = pascal_case

dotnet_naming_rule.interfaces_should_begin_with_i.severity = suggestion
dotnet_naming_rule.interfaces_should_begin_with_i.symbols = interface
dotnet_naming_rule.interfaces_should_begin_with_i.style = IPascalCase

dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = local
dotnet_naming_rule.locals_should_be_camel_case.style = camelCase

dotnet_naming_rule.private_fields_should_be_leading_underscore.severity = suggestion
dotnet_naming_rule.private_fields_should_be_leading_underscore.symbols = private_field
dotnet_naming_rule.private_fields_should_be_leading_underscore.style = _leadingUnderscore

dotnet_naming_rule.type_parameters_should_begin_with_t.severity = suggestion
dotnet_naming_rule.type_parameters_should_begin_with_t.symbols = type_parameter
dotnet_naming_rule.type_parameters_should_begin_with_t.style = TPascalCase

################################################################################################
## JSON & Regular Expressions (IDE only
##
################################################################################################

# JSON001 – Invalid JSON pattern
# https://learn.microsoft.com/en-us/visualstudio/ide/reference/json001
dotnet_diagnostic.JSON001.severity = warning

# JSON002 – Probable JSON string detected
# https://learn.microsoft.com/en-us/visualstudio/ide/reference/json002
dotnet_diagnostic.JSON002.severity = warning

# RE0001 – Invalid regex pattern
# https://learn.microsoft.com/en-us/visualstudio/ide/reference/re0001
dotnet_diagnostic.RE0001.severity = error

################################################################################################
## Code Quality Rules
##
## https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/
## https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options
## https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-quality-rule-options
################################################################################################

############################################################
# DESIGN RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/design-warnings
#

# CA1000: Do not declare static members on generic types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1000
dotnet_diagnostic.CA1000.severity = default

# CA1001: Types that own disposable fields should be disposable
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1001
dotnet_diagnostic.CA1001.severity = default

# CA1002: Do not expose generic lists
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1002
dotnet_diagnostic.CA1002.severity = default

# CA1003: Use generic event handler instances
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1003
dotnet_diagnostic.CA1003.severity = default

# CA1005: Avoid excessive parameters on generic types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1005
dotnet_diagnostic.CA1005.severity = default

# CA1008: Enums should have zero value
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1008
dotnet_diagnostic.CA1008.severity = default

# CA1010: Collections should implement generic interface
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1010
dotnet_diagnostic.CA1010.severity = default

# CA1012: Abstract types should not have public constructors
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1012
dotnet_diagnostic.CA1012.severity = default

# CA1014: Mark assemblies with CLSCompliantAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1014
dotnet_diagnostic.CA1014.severity = default

# CA1016: Mark assemblies with AssemblyVersionAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1016
dotnet_diagnostic.CA1016.severity = default

# CA1017: Mark assemblies with ComVisibleAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1017
dotnet_diagnostic.CA1017.severity = default

# CA1018: Mark attributes with AttributeUsageAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1018
dotnet_diagnostic.CA1018.severity = default

# CA1019: Define accessors for attribute arguments
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1019
dotnet_diagnostic.CA1019.severity = default

# CA1021: Avoid out parameters
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1021
dotnet_diagnostic.CA1021.severity = default

# CA1024: Use properties where appropriate
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1024
dotnet_diagnostic.CA1024.severity = default

# CA1027: Mark enums with FlagsAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1027
dotnet_diagnostic.CA1027.severity = default

# CA1028: Enum storage should be Int32
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1028
dotnet_diagnostic.CA1028.severity = default

# CA1030: Use events where appropriate
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1030
dotnet_diagnostic.CA1030.severity = default

# CA1031: Do not catch general exception types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1031
dotnet_diagnostic.CA1031.severity = default

# CA1032: Implement standard exception constructors
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1032
dotnet_diagnostic.CA1032.severity = default

# CA1033: Interface methods should be callable by child types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1033
dotnet_diagnostic.CA1033.severity = default

# CA1034: Nested types should not be visible
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1034
dotnet_diagnostic.CA1034.severity = default

# CA1036: Override methods on comparable types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1036
dotnet_diagnostic.CA1036.severity = default

# CA1040: Avoid empty interfaces
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1040
dotnet_diagnostic.CA1040.severity = default

# CA1041: Provide ObsoleteAttribute message
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1041
dotnet_diagnostic.CA1041.severity = default

# CA1043: Use integral or string argument for indexers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1043
dotnet_diagnostic.CA1043.severity = default

# CA1044: Properties should not be write only
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1044
dotnet_diagnostic.CA1044.severity = default

# CA1045: Do not pass types by reference
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1045
dotnet_diagnostic.CA1045.severity = default

# CA1046: Do not overload operator equals on reference types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1046
dotnet_diagnostic.CA1046.severity = default

# CA1047: Do not declare protected members in sealed types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1047
dotnet_diagnostic.CA1047.severity = default

# CA1050: Declare types in namespaces
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1050
dotnet_diagnostic.CA1050.severity = default

# CA1051: Do not declare visible instance fields
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1051
dotnet_diagnostic.CA1051.severity = default

# CA1052: Static holder types should be sealed
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1052
dotnet_diagnostic.CA1052.severity = default

# CA1053: Static holder types should not have constructors
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1053
dotnet_diagnostic.CA1053.severity = default

# CA1054: URI parameters should not be strings
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1054
dotnet_diagnostic.CA1054.severity = default

# CA1055: URI return values should not be strings
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1055
dotnet_diagnostic.CA1055.severity = default

# CA1056: URI properties should not be strings
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1056
dotnet_diagnostic.CA1056.severity = default

# CA1058: Types should not extend certain base types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1058
dotnet_diagnostic.CA1058.severity = default

# CA1060: Move P/Invokes to NativeMethods class
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1060
dotnet_diagnostic.CA1060.severity = default

# CA1061: Do not hide base class methods
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1061
dotnet_diagnostic.CA1061.severity = default

# CA1062: Validate arguments of public methods
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1062
dotnet_diagnostic.CA1062.severity = default

# CA1063: Implement IDisposable correctly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1063
dotnet_diagnostic.CA1063.severity = default

# CA1064: Exceptions should be public
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1064
dotnet_diagnostic.CA1064.severity = default

# CA1065: Do not raise exceptions in unexpected locations
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065
dotnet_diagnostic.CA1065.severity = default

# CA1066: Implement IEquatable when overriding Equals
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1066
dotnet_diagnostic.CA1066.severity = default

# CA1067: Override Equals when implementing IEquatable
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1067
dotnet_diagnostic.CA1067.severity = default

# CA1068: CancellationToken parameters must come last
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1068
dotnet_diagnostic.CA1068.severity = default

# CA1069: Enums should not have duplicate values
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1069
dotnet_diagnostic.CA1069.severity = default

# CA1070: Do not declare event fields as virtual
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1070
dotnet_diagnostic.CA1070.severity = default

############################################################
# DOCUMENTATION RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/documentation-warnings
#

# CA1200: Avoid using cref tags with a prefix
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1200
dotnet_diagnostic.CA1200.severity = default

############################################################
# GLOBALIZATION RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/globalization-warnings
#

# CA1303: Do not pass literals as localized parameters
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1303
dotnet_diagnostic.CA1303.severity = default

# CA1304: Specify CultureInfo
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1304
dotnet_diagnostic.CA1304.severity = default

# CA1305: Specify IFormatProvider
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1305
dotnet_diagnostic.CA1305.severity = default

# CA1307: Specify StringComparison for clarity
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1307
dotnet_diagnostic.CA1307.severity = default

# CA1308: Normalize strings to uppercase
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1308
dotnet_diagnostic.CA1308.severity = default

# CA1309: Use ordinal StringComparison
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1309
dotnet_diagnostic.CA1309.severity = default

# CA1310: Specify StringComparison for correctness
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1310
dotnet_diagnostic.CA1310.severity = default

# CA1311: Specify a culture or use an invariant version
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1311
dotnet_diagnostic.CA1311.severity = default

# CA2101: Specify marshalling for P/Invoke string arguments
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2101
dotnet_diagnostic.CA2101.severity = default

############################################################
# PORTABILITY AND INTEROPERABILITY RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/interoperability-warnings
#

# CA1401: P/Invokes should not be visible
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1401
dotnet_diagnostic.CA1401.severity = default

# CA1416: Validate platform compatibility
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1416
dotnet_diagnostic.CA1416.severity = default

# CA1417: Do not use OutAttribute on string parameters for P/Invokes
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1417
dotnet_diagnostic.CA1417.severity = default

# CA1418: Use valid platform string
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1418
dotnet_diagnostic.CA1418.severity = default

# CA1419: Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1419
dotnet_diagnostic.CA1419.severity = default

# CA1420: Property, type, or attribute requires runtime marshalling
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1420
dotnet_diagnostic.CA1420.severity = default

# CA1421: Method uses runtime marshalling when DisableRuntimeMarshallingAttribute is applied
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1421
dotnet_diagnostic.CA1421.severity = default

# CA1422: Validate platform compatibility
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1422
dotnet_diagnostic.CA1422.severity = default

############################################################
# MAINTAINABILITY RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/maintainability-warnings
#

# CA1501: Avoid excessive inheritance
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1501
dotnet_diagnostic.CA1501.severity = default

# CA1502: Avoid excessive complexity
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1502
dotnet_diagnostic.CA1502.severity = default

# CA1505: Avoid unmaintainable code
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1505
dotnet_diagnostic.CA1505.severity = default

# CA1506: Avoid excessive class coupling
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1506
dotnet_diagnostic.CA1506.severity = default

# CA1507: Use nameof in place of string
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1507
dotnet_diagnostic.CA1507.severity = default

# CA1508: Avoid dead conditional code
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1508
dotnet_diagnostic.CA1508.severity = default

# CA1509: Invalid entry in code metrics configuration file
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1509
dotnet_diagnostic.CA1509.severity = default

# CA1510: Use ArgumentNullException throw helper
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1510
dotnet_diagnostic.CA1510.severity = default

# CA1511: Use ArgumentException throw helper
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1511
dotnet_diagnostic.CA1511.severity = default

# CA1512: Use ArgumentOutOfRangeException throw helper
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1512
dotnet_diagnostic.CA1512.severity = default

# CA1513: Use ObjectDisposedException throw helper
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1513
dotnet_diagnostic.CA1513.severity = default

# CA1514: Avoid redundant length argument
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1514
dotnet_diagnostic.CA1514.severity = default

# CA1515: Consider making public types internal
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1515
dotnet_diagnostic.CA1515.severity = default

############################################################
# NAMING RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/naming-warnings
#

# CA1700: Do not name enum values 'Reserved'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1700
dotnet_diagnostic.CA1700.severity = default

# CA1707: Identifiers should not contain underscores
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1707
dotnet_diagnostic.CA1707.severity = default

# CA1708: Identifiers should differ by more than case
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1708
dotnet_diagnostic.CA1708.severity = default

# CA1710: Identifiers should have correct suffix
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1710
dotnet_diagnostic.CA1710.severity = default

# CA1711: Identifiers should not have incorrect suffix
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1711
dotnet_diagnostic.CA1711.severity = default

# CA1712: Do not prefix enum values with type name
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1712
dotnet_diagnostic.CA1712.severity = default

# CA1713: Events should not have before or after prefix
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1713
dotnet_diagnostic.CA1713.severity = default

# CA1714: Flags enums should have plural names
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1714
dotnet_diagnostic.CA1714.severity = default

# CA1715: Identifiers should have correct prefix
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1715
dotnet_diagnostic.CA1715.severity = default

# CA1716: Identifiers should not match keywords
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1716
dotnet_diagnostic.CA1716.severity = default

# CA1717: Only FlagsAttribute enums should have plural names
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1717
dotnet_diagnostic.CA1717.severity = default

# CA1720: Identifiers should not contain type names
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1720
dotnet_diagnostic.CA1720.severity = default

# CA1721: Property names should not match get methods
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1721
dotnet_diagnostic.CA1721.severity = default

# CA1724: Type Names Should Not Match Namespaces
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1724
dotnet_diagnostic.CA1724.severity = default

# CA1725: Parameter names should match base declaration
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1725
dotnet_diagnostic.CA1725.severity = default

# CA1727: Use PascalCase for named placeholders
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1727
dotnet_diagnostic.CA1727.severity = default

############################################################
# PERFORMANCE RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/performance-warnings
#

# CA1802: Use Literals Where Appropriate
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1802
dotnet_diagnostic.CA1802.severity = default

# CA1805: Do not initialize unnecessarily
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1805
dotnet_diagnostic.CA1805.severity = default

# CA1806: Do not ignore method results
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1806
dotnet_diagnostic.CA1806.severity = default

# CA1810: Initialize reference type static fields inline
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1810
dotnet_diagnostic.CA1810.severity = default

# CA1812: Avoid uninstantiated internal classes
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1812
dotnet_diagnostic.CA1812.severity = default

# CA1813: Avoid unsealed attributes
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1813
dotnet_diagnostic.CA1813.severity = default

# CA1814: Prefer jagged arrays over multidimensional
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1814
dotnet_diagnostic.CA1814.severity = default

# CA1815: Override equals and operator equals on value types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1815
dotnet_diagnostic.CA1815.severity = default

# CA1819: Properties should not return arrays
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1819
dotnet_diagnostic.CA1819.severity = default

# CA1820: Test for empty strings using string length
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1820
dotnet_diagnostic.CA1820.severity = default

# CA1821: Remove empty finalizers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1821
dotnet_diagnostic.CA1821.severity = default

# CA1822: Mark members as static
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1822
dotnet_diagnostic.CA1822.severity = default

# CA1823: Avoid unused private fields
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1823
dotnet_diagnostic.CA1823.severity = default

# CA1824: Mark assemblies with NeutralResourcesLanguageAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1824
dotnet_diagnostic.CA1824.severity = default

# CA1825: Avoid zero-length array allocations
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1825
dotnet_diagnostic.CA1825.severity = default

# CA1826: Use property instead of Linq Enumerable method
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1826
dotnet_diagnostic.CA1826.severity = default

# CA1827: Do not use Count/LongCount when Any can be used
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1827
dotnet_diagnostic.CA1827.severity = default

# CA1828: Do not use CountAsync/LongCountAsync when AnyAsync can be used
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1828
dotnet_diagnostic.CA1828.severity = default

# CA1829: Use Length/Count property instead of Enumerable.Count method
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1829
dotnet_diagnostic.CA1829.severity = default

# CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1830
dotnet_diagnostic.CA1830.severity = default

# CA1831: Use AsSpan instead of Range-based indexers for string when appropriate
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1831
dotnet_diagnostic.CA1831.severity = default

# CA1832: Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1832
dotnet_diagnostic.CA1832.severity = default

# CA1833: Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1833
dotnet_diagnostic.CA1833.severity = default

# CA1834: Use StringBuilder.Append(char) for single character strings
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1834
dotnet_diagnostic.CA1834.severity = default

# CA1835: Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1835
dotnet_diagnostic.CA1835.severity = default

# CA1836: Prefer IsEmpty over Count when available
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1836
dotnet_diagnostic.CA1836.severity = default

# CA1837: Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1837
dotnet_diagnostic.CA1837.severity = default

# CA1838: Avoid StringBuilder parameters for P/Invokes
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1838
dotnet_diagnostic.CA1838.severity = default

# CA1839: Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1839
dotnet_diagnostic.CA1839.severity = default

# CA1840: Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1840
dotnet_diagnostic.CA1840.severity = default

# CA1841: Prefer Dictionary Contains methods
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1841
dotnet_diagnostic.CA1841.severity = default

# CA1842: Do not use 'WhenAll' with a single task
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1842
dotnet_diagnostic.CA1842.severity = default

# CA1843: Do not use 'WaitAll' with a single task
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1843
dotnet_diagnostic.CA1843.severity = default

# CA1844: Provide memory-based overrides of async methods when subclassing 'Stream'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1844
dotnet_diagnostic.CA1844.severity = default

# CA1845: Use span-based 'string.Concat'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1845
dotnet_diagnostic.CA1845.severity = default

# CA1846: Prefer AsSpan over Substring
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1846
dotnet_diagnostic.CA1846.severity = default

# CA1847: Use char literal for a single character lookup
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1847
dotnet_diagnostic.CA1847.severity = default

# CA1848: Use the LoggerMessage delegates
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1848
dotnet_diagnostic.CA1848.severity = default

# CA1849: Call async methods when in an async method
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1849
dotnet_diagnostic.CA1849.severity = default

# CA1850: Prefer static HashData method over ComputeHash
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1850
dotnet_diagnostic.CA1850.severity = default

# CA1851: Possible multiple enumerations of IEnumerable collection
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1851
dotnet_diagnostic.CA1851.severity = default

# CA1852: Seal internal types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1852
dotnet_diagnostic.CA1852.severity = default

# CA1853: Unnecessary call to 'Dictionary.ContainsKey(key)'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1853
dotnet_diagnostic.CA1853.severity = default

# CA1854: Prefer the 'IDictionary.TryGetValue(TKey, out TValue)' method
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1854
dotnet_diagnostic.CA1854.severity = default

# CA1855: Use Span<T>.Clear() instead of Span<T>.Fill()
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1855
dotnet_diagnostic.CA1855.severity = default

# CA1856: Incorrect usage of ConstantExpected attribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1856
dotnet_diagnostic.CA1856.severity = default

# CA1857: The parameter expects a constant for optimal performance
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1857
dotnet_diagnostic.CA1857.severity = default

# CA1858: Use StartsWith instead of IndexOf
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1858
dotnet_diagnostic.CA1858.severity = default

# CA1859: Use concrete types when possible for improved performance
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1859
dotnet_diagnostic.CA1859.severity = default

# CA1860: Avoid using 'Enumerable.Any()' extension method
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1860
dotnet_diagnostic.CA1860.severity = default

# CA1861: Avoid constant arrays as arguments
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1861
dotnet_diagnostic.CA1861.severity = default

# CA1862: Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1862
dotnet_diagnostic.CA1862.severity = default

# CA1863: Use 'CompositeFormat'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1863
dotnet_diagnostic.CA1863.severity = default

# CA1864: Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1864
dotnet_diagnostic.CA1864.severity = default

# CA1865-CA1867: Use char overload
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1865-ca1867
dotnet_diagnostic.CA1865.severity = default

# CA1868: Unnecessary call to 'Contains' for sets
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1868
dotnet_diagnostic.CA1868.severity = default

# CA1869: Cache and reuse 'JsonSerializerOptions' instances
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1869
dotnet_diagnostic.CA1869.severity = default

# CA1870: Use a cached 'SearchValues' instance
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1870
dotnet_diagnostic.CA1870.severity = default

############################################################
# SINGLE FILE RULES
# https://learn.microsoft.com/en-us/dotnet/core/deploying/single-file/warnings/overview
#

# IL3000: Avoid accessing Assembly file path when publishing as a single file
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/il3000
dotnet_diagnostic.IL3000.severity = default

# IL3001: Avoid accessing Assembly file path when publishing as a single file
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/il3001
dotnet_diagnostic.IL3001.severity = default

# IL3002: Avoid calling members annotated with 'RequiresAssemblyFilesAttribute' when publishing as a single file
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/il3002
dotnet_diagnostic.IL3002.severity = default

# IL3003: 'RequiresAssemblyFilesAttribute' annotations must match across all interface implementations or overrides.
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/il3003
dotnet_diagnostic.IL3003.severity = default

############################################################
# RELIABILITY RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/reliability-warnings
#

# CA2000: Dispose objects before losing scope
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2000
dotnet_diagnostic.CA2000.severity = default

# CA2002: Do not lock on objects with weak identity
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2002
dotnet_diagnostic.CA2002.severity = default

# CA2007: Do not directly await a Task
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2007
dotnet_diagnostic.CA2007.severity = default

# CA2008: Do not create tasks without passing a TaskScheduler
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2008
dotnet_diagnostic.CA2008.severity = default

# CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2009
dotnet_diagnostic.CA2009.severity = default

# CA2011: Do not assign property within its setter
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2011
dotnet_diagnostic.CA2011.severity = default

# CA2012: Use ValueTasks correctly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2012
dotnet_diagnostic.CA2012.severity = default

# CA2013: Do not use ReferenceEquals with value types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2013
dotnet_diagnostic.CA2013.severity = default

# CA2014: Do not use stackalloc in loops.
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2014
dotnet_diagnostic.CA2014.severity = default

# CA2015: Do not define finalizers for types derived from MemoryManager<T>
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2015
dotnet_diagnostic.CA2015.severity = default

# CA2016: Forward the CancellationToken parameter to methods that take one
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2016
dotnet_diagnostic.CA2016.severity = default

# CA2017: Parameter count mismatch
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2017
dotnet_diagnostic.CA2017.severity = default

# CA2018: The count argument to Buffer.BlockCopy should specify the number of bytes to copy
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2018
dotnet_diagnostic.CA2018.severity = default

# CA2019: ThreadStatic fields should not use inline initialization
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2019
dotnet_diagnostic.CA2019.severity = default

# CA2020: Prevent behavioral change caused by built-in operators of IntPtr/UIntPtr
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2020
dotnet_diagnostic.CA2020.severity = default

# CA2021: Don't call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2021
dotnet_diagnostic.CA2021.severity = default

############################################################
# SECURITY RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/security-warnings
#

# CA2100: Review SQL queries for security vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2100
dotnet_diagnostic.CA2100.severity = default

# CA2109: Review visible event handlers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2109
dotnet_diagnostic.CA2109.severity = default

# CA2119: Seal methods that satisfy private interfaces
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2119
dotnet_diagnostic.CA2119.severity = default

# CA2153: Avoid Handling Corrupted State Exceptions
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2153
dotnet_diagnostic.CA2153.severity = default

# CA2300: Do not use insecure deserializer BinaryFormatter
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2300
dotnet_diagnostic.CA2300.severity = default

# CA2301: Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2301
dotnet_diagnostic.CA2301.severity = default

# CA2302: Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2302
dotnet_diagnostic.CA2302.severity = default

# CA2305: Do not use insecure deserializer LosFormatter
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2305
dotnet_diagnostic.CA2305.severity = default

# CA2310: Do not use insecure deserializer NetDataContractSerializer
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2310
dotnet_diagnostic.CA2310.severity = default

# CA2311: Do not deserialize without first setting NetDataContractSerializer.Binder
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2311
dotnet_diagnostic.CA2311.severity = default

# CA2312: Ensure NetDataContractSerializer.Binder is set before deserializing
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2312
dotnet_diagnostic.CA2312.severity = default

# CA2315: Do not use insecure deserializer ObjectStateFormatter
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2315
dotnet_diagnostic.CA2315.severity = default

# CA2321: Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2321
dotnet_diagnostic.CA2321.severity = default

# CA2322: Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2322
dotnet_diagnostic.CA2322.severity = default

# CA2326: Do not use TypeNameHandling values other than None
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2326
dotnet_diagnostic.CA2326.severity = default

# CA2327: Do not use insecure JsonSerializerSettings
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2327
dotnet_diagnostic.CA2327.severity = default

# CA2328: Ensure that JsonSerializerSettings are secure
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2328
dotnet_diagnostic.CA2328.severity = default

# CA2329: Do not deserialize with JsonSerializer using an insecure configuration
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2329
dotnet_diagnostic.CA2329.severity = default

# CA2330: Ensure that JsonSerializer has a secure configuration when deserializing
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2330
dotnet_diagnostic.CA2330.severity = default

# CA2350: Ensure DataTable.ReadXml()'s input is trusted
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2350
dotnet_diagnostic.CA2350.severity = default

# CA2351: Ensure DataSet.ReadXml()'s input is trusted
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2351
dotnet_diagnostic.CA2351.severity = default

# CA2352: Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2352
dotnet_diagnostic.CA2352.severity = default

# CA2353: Unsafe DataSet or DataTable in serializable type
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2353
dotnet_diagnostic.CA2353.severity = default

# CA2354: Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attack
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2354
dotnet_diagnostic.CA2354.severity = default

# CA2355: Unsafe DataSet or DataTable in deserialized object graph
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2355
dotnet_diagnostic.CA2355.severity = default

# CA2356: Unsafe DataSet or DataTable in web deserialized object graph
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2356
dotnet_diagnostic.CA2356.severity = default

# CA2361: Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2361
dotnet_diagnostic.CA2361.severity = default

# CA2362: Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2362
dotnet_diagnostic.CA2362.severity = default

# CA3001: Review code for SQL injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3001
dotnet_diagnostic.CA3001.severity = default

# CA3002: Review code for XSS vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3002
dotnet_diagnostic.CA3002.severity = default

# CA3003: Review code for file path injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3003
dotnet_diagnostic.CA3003.severity = default

# CA3004: Review code for information disclosure vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3004
dotnet_diagnostic.CA3004.severity = default

# CA3006: Review code for process command injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3006
dotnet_diagnostic.CA3006.severity = default

# CA3007: Review code for open redirect vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3007
dotnet_diagnostic.CA3007.severity = default

# CA3008: Review code for XPath injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3008
dotnet_diagnostic.CA3008.severity = default

# CA3009: Review code for XML injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3009
dotnet_diagnostic.CA3009.severity = default

# CA3010: Review code for XAML injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3010
dotnet_diagnostic.CA3010.severity = default

# CA3011: Review code for DLL injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3011
dotnet_diagnostic.CA3011.severity = default

# CA3012: Review code for regex injection vulnerabilities
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3012
dotnet_diagnostic.CA3012.severity = default

# CA3061: Do not add schema by URL
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3061
dotnet_diagnostic.CA3061.severity = default

# CA3075: Insecure DTD Processing
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3075
dotnet_diagnostic.CA3075.severity = default

# CA3076: Insecure XSLT Script Execution
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3076
dotnet_diagnostic.CA3076.severity = default

# CA3077: Insecure Processing in API Design, XML Document and XML Text Reader
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3077
dotnet_diagnostic.CA3077.severity = default

# CA3147: Mark verb handlers with ValidateAntiForgeryToken
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca3147
dotnet_diagnostic.CA3147.severity = default

# CA5350: Do Not Use Weak Cryptographic Algorithms
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5350
dotnet_diagnostic.CA5350.severity = default

# CA5351: Do Not Use Broken Cryptographic Algorithms
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5351
dotnet_diagnostic.CA5351.severity = default

# CA5358: Do Not Use Unsafe Cipher Modes
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5358
dotnet_diagnostic.CA5358.severity = default

# CA5359: Do not disable certificate validation
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5359
dotnet_diagnostic.CA5359.severity = default

# CA5360: Do not call dangerous methods in deserialization
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5360
dotnet_diagnostic.CA5360.severity = default

# CA5361: Do not disable SChannel use of strong crypto
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5361
dotnet_diagnostic.CA5361.severity = default

# CA5362: Potential reference cycle in deserialized object graph
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5362
dotnet_diagnostic.CA5362.severity = default

# CA5363: Do not disable request validation
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5363
dotnet_diagnostic.CA5363.severity = default

# CA5364: Do not use deprecated security protocols
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5364
dotnet_diagnostic.CA5364.severity = default

# CA5365: Do Not Disable HTTP Header Checking
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5365
dotnet_diagnostic.CA5365.severity = default

# CA5366: Use XmlReader For DataSet Read XML
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5366
dotnet_diagnostic.CA5366.severity = default

# CA5367: Do Not Serialize Types With Pointer Fields
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5367
dotnet_diagnostic.CA5367.severity = default

# CA5368: Set ViewStateUserKey For Classes Derived From Page
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5368
dotnet_diagnostic.CA5368.severity = default

# CA5369: Use XmlReader for Deserialize
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5369
dotnet_diagnostic.CA5369.severity = default

# CA5370: Use XmlReader for validating reader
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5370
dotnet_diagnostic.CA5370.severity = default

# CA5371: Use XmlReader for schema read
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5371
dotnet_diagnostic.CA5371.severity = default

# CA5372: Use XmlReader for XPathDocument
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5372
dotnet_diagnostic.CA5372.severity = default

# CA5373: Do not use obsolete key derivation function
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5373
dotnet_diagnostic.CA5373.severity = default

# CA5374: Do Not Use XslTransform
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5374
dotnet_diagnostic.CA5374.severity = default

# CA5375: Do not use account shared access signature
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5375
dotnet_diagnostic.CA5375.severity = default

# CA5376: Use SharedAccessProtocol HttpsOnly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5376
dotnet_diagnostic.CA5376.severity = default

# CA5377: Use container level access policy
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5377
dotnet_diagnostic.CA5377.severity = default

# CA5378: Do not disable ServicePointManagerSecurityProtocols
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5378
dotnet_diagnostic.CA5378.severity = default

# CA5379: Ensure key derivation function algorithm is sufficiently strong
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5379
dotnet_diagnostic.CA5379.severity = default

# CA5380: Do not add certificates to root store
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5380
dotnet_diagnostic.CA5380.severity = default

# CA5381: Ensure certificates are not added to root store
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5381
dotnet_diagnostic.CA5381.severity = default

# CA5382: Use secure cookies in ASP.NET Core
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5382
dotnet_diagnostic.CA5382.severity = default

# CA5383: Ensure use secure cookies in ASP.NET Core
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5383
dotnet_diagnostic.CA5383.severity = default

# CA5384: Do not use digital signature algorithm (DSA)
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5384
dotnet_diagnostic.CA5384.severity = default

# CA5385: Use Rivest–Shamir–Adleman (RSA) algorithm with sufficient key size
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5385
dotnet_diagnostic.CA5385.severity = default

# CA5386: Avoid hardcoding SecurityProtocolType value
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5386
dotnet_diagnostic.CA5386.severity = default

# CA5387: Do not use weak key derivation function with insufficient iteration count
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5387
dotnet_diagnostic.CA5387.severity = default

# CA5388: Ensure sufficient iteration count when using weak key derivation function
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5388
dotnet_diagnostic.CA5388.severity = default

# CA5389: Do not add archive item's path to the target file system path
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5389
dotnet_diagnostic.CA5389.severity = default

# CA5390: Do not hard-code encryption key
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5390
dotnet_diagnostic.CA5390.severity = default

# CA5391: Use antiforgery tokens in ASP.NET Core MVC controllers
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5391
dotnet_diagnostic.CA5391.severity = default

# CA5392: Use DefaultDllImportSearchPaths attribute for P/Invokes
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5392
dotnet_diagnostic.CA5392.severity = default

# CA5393: Do not use unsafe DllImportSearchPath value
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5393
dotnet_diagnostic.CA5393.severity = default

# CA5394: Do not use insecure randomness
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5394
dotnet_diagnostic.CA5394.severity = default

# CA5395: Miss HttpVerb attribute for action methods
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5395
dotnet_diagnostic.CA5395.severity = default

# CA5396: Set HttpOnly to true for HttpCookie
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5396
dotnet_diagnostic.CA5396.severity = default

# CA5397: Do not use deprecated SslProtocols values
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5397
dotnet_diagnostic.CA5397.severity = default

# CA5398: Avoid hardcoded SslProtocols values
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5398
dotnet_diagnostic.CA5398.severity = default

# CA5399: Enable HttpClient certificate revocation list check
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5399
dotnet_diagnostic.CA5399.severity = default

# CA5400: Ensure HttpClient certificate revocation list check is not disabled
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5400
dotnet_diagnostic.CA5400.severity = default

# CA5401: Do not use CreateEncryptor with non-default IV
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5401
dotnet_diagnostic.CA5401.severity = default

# CA5402: Use CreateEncryptor with the default IV
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5402
dotnet_diagnostic.CA5402.severity = default

# CA5403: Do not hard-code certificate
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5403
dotnet_diagnostic.CA5403.severity = default

# CA5404: Do not disable token validation checks
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5404
dotnet_diagnostic.CA5404.severity = default

# CA5405: Do not always skip token validation in delegates
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5405
dotnet_diagnostic.CA5405.severity = default

############################################################
# USAGE RULES
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/usage-warnings
#

# CA1801: Review unused parameters
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1801
dotnet_diagnostic.CA1801.severity = default

# CA1816: Call GC.SuppressFinalize correctly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1816
dotnet_diagnostic.CA1816.severity = default

# CA2200: Rethrow to preserve stack details
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2200
dotnet_diagnostic.CA2200.severity = default

# CA2201: Do not raise reserved exception types
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2201
dotnet_diagnostic.CA2201.severity = default

# CA2207: Initialize value type static fields inline
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2207
dotnet_diagnostic.CA2207.severity = default

# CA2208: Instantiate argument exceptions correctly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2208
dotnet_diagnostic.CA2208.severity = default

# CA2211: Non-constant fields should not be visible
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2211
dotnet_diagnostic.CA2211.severity = default

# CA2213: Disposable fields should be disposed
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2213
dotnet_diagnostic.CA2213.severity = default

# CA2214: Do not call overridable methods in constructors
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2214
dotnet_diagnostic.CA2214.severity = default

# CA2215: Dispose methods should call base class dispose
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2215
dotnet_diagnostic.CA2215.severity = default

# CA2216: Disposable types should declare finalizer
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2216
dotnet_diagnostic.CA2216.severity = default

# CA2217: Do not mark enums with FlagsAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2217
dotnet_diagnostic.CA2217.severity = default

# CA2218: Override GetHashCode on overriding Equals
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2218
dotnet_diagnostic.CA2218.severity = default

# CA2219: Do not raise exceptions in exception clauses
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2219
dotnet_diagnostic.CA2219.severity = default

# CA2224: Override equals on overloading operator equals
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2224
dotnet_diagnostic.CA2224.severity = default

# CA2225: Operator overloads have named alternates
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2225
dotnet_diagnostic.CA2225.severity = default

# CA2226: Operators should have symmetrical overloads
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2226
dotnet_diagnostic.CA2226.severity = default

# CA2227: Collection properties should be read only
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2227
dotnet_diagnostic.CA2227.severity = default

# CA2229: Implement serialization constructors
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2229
dotnet_diagnostic.CA2229.severity = default

# CA2231: Overload operator equals on overriding ValueType.Equals
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2231
dotnet_diagnostic.CA2231.severity = default

# CA2234: Pass System.Uri objects instead of strings
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2234
dotnet_diagnostic.CA2234.severity = default

# CA2235: Mark all non-serializable fields
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2235
dotnet_diagnostic.CA2235.severity = default

# CA2237: Mark ISerializable types with SerializableAttribute
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2237
dotnet_diagnostic.CA2237.severity = default

# CA2241: Provide correct arguments to formatting methods
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2241
dotnet_diagnostic.CA2241.severity = default

# CA2242: Test for NaN correctly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2242
dotnet_diagnostic.CA2242.severity = default

# CA2243: Attribute string literals should parse correctly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2243
dotnet_diagnostic.CA2243.severity = default

# CA2244: Do not duplicate indexed element initializations
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2244
dotnet_diagnostic.CA2244.severity = default

# CA2245: Do not assign a property to itself
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2245
dotnet_diagnostic.CA2245.severity = default

# CA2246: Do not assign a symbol and its member in the same statement
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2246
dotnet_diagnostic.CA2246.severity = default

# CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2247
dotnet_diagnostic.CA2247.severity = default

# CA2248: Provide correct 'enum' argument to 'Enum.HasFlag'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2248
dotnet_diagnostic.CA2248.severity = default

# CA2249: Consider using String.Contains instead of String.IndexOf
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2249
dotnet_diagnostic.CA2249.severity = default

# CA2250: Use ThrowIfCancellationRequested
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2250
dotnet_diagnostic.CA2250.severity = default

# CA2251: Use String.Equals over String.Compare
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2251
dotnet_diagnostic.CA2251.severity = default

# CA2252: Opt in to preview features
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2252
dotnet_diagnostic.CA2252.severity = default

# CA2253: Named placeholders should not be numeric values
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2253
dotnet_diagnostic.CA2253.severity = default

# CA2254: Template should be a static expression
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2254
dotnet_diagnostic.CA2254.severity = default

# CA2255: The ModuleInitializer attribute should not be used in libraries
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2255
dotnet_diagnostic.CA2255.severity = default

# CA2256: All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2256
dotnet_diagnostic.CA2256.severity = default

# CA2257: Members defined on an interface with 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2257
dotnet_diagnostic.CA2257.severity = default

# CA2258: Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2258
dotnet_diagnostic.CA2258.severity = default

# CA2259: Ensure ThreadStatic is only used with static fields
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2259
dotnet_diagnostic.CA2259.severity = default

# CA2260: Implement generic math interfaces correctly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2260
dotnet_diagnostic.CA2260.severity = default

# CA2261: Do not use ConfigureAwaitOptions.SuppressThrowing with Task<TResult>
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2261
dotnet_diagnostic.CA2261.severity = default

# CA2262: Set MaxResponseHeadersLength properly
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2262
dotnet_diagnostic.CA2262.severity = default

